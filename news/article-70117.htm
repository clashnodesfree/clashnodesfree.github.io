<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
    	<link rel="canonical" href="https://clashnodesfree.github.io/news/article-70117.htm" />
	<!-- basic -->
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
	<!-- mobile metas -->
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<meta name="viewport" content="initial-scale=1, maximum-scale=1">
	<!-- site metas -->
	<title>【Android笔记】BaseAdapter适配器的介绍、使用及优化（详细）</title>
		<meta name="description" content="&nbsp; 什么是数据适配器 &nbsp;  &nbsp; 数据源（Data source）的格式是多种多样的，但是ListView的可以展示的格式却是有一定的要求的 作为适配器(Adapter)的" />
	
    <meta name="author" content="ClashNodesFree免费订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashnodesfree.github.io/news/article-70117.htm" />
    <meta property="og:site_name" content="ClashNodesFree免费订阅站" />
    <meta property="og:title" content="【Android笔记】BaseAdapter适配器的介绍、使用及优化（详细）" />
    <meta property="og:image" content="https://clashnodesfree.github.io/uploads/20240323/c4695008c4879510e450301ea516b067.webp" />
        <meta property="og:release_date" content="2025-03-09T09:44:12" />
    <meta property="og:updated_time" content="2025-03-09T09:44:12" />
        <meta property="og:description" content="&nbsp; 什么是数据适配器 &nbsp;  &nbsp; 数据源（Data source）的格式是多种多样的，但是ListView的可以展示的格式却是有一定的要求的 作为适配器(Adapter)的" />
        
	<!-- bootstrap css -->
	<link rel="stylesheet" type="text/css" href="/assets/website/css/clashnodesfree/bootstrap.min.css">
	<!-- style css -->
	<link rel="stylesheet" type="text/css" href="/assets/website/css/clashnodesfree/style.css">
	<!-- Responsive-->
	<link rel="stylesheet" href="/assets/website/css/clashnodesfree/responsive.css">
	<!-- favicon -->
	<link rel="icon" href="/assets/website/img/clashnodesfree/favicon.ico" type="image/x-icon"/>
	<!-- Scrollbar Custom CSS -->
	<link rel="stylesheet" href="/assets/website/css/clashnodesfree/jquery.mCustomScrollbar.min.css">
	<!-- Tweaks for older IEs-->
	<link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
	<!-- fonts -->
	<link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;800&family=Sen:wght@400;700;800&display=swap" rel="stylesheet">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="【Android笔记】BaseAdapter适配器的介绍、使用及优化（详细）">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
	<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-Z348FF31FW"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-Z348FF31FW');
</script>
	<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- header section start -->
    <div class="header_section header_bg">
        <div class="container-fluid">
                        <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Clash Nodes Free</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">客户端</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                            </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="breadcrumb">
              <a href="/">首页</a> / 
              <a href="/news/">新闻资讯</a> / 
              <span>正文</span>
            </div>

            <div class="row">
                <div class="col-md-9">
                    <h1 class="services_taital mb-5">【Android笔记】BaseAdapter适配器的介绍、使用及优化（详细）</h1>
                                    <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                  				  				  				<div id="content_views" class="htmledit_views"> <p>&nbsp;</p> <h2>什么是数据适配器</h2> <p>&nbsp;</p> <p><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads/20230211/98916a09c42d67d5aa020c1b51234872.jpg"></p> <p>&nbsp;</p> <p>数据源（Data source）的格式是多种多样的，但是ListView的可以展示的格式却是有一定的要求的</p> <p>作为适配器(Adapter)的作用就是将数据源中多种多样的数据格式转化为ListView可以展示的格式，建立数据源与ListView的一个适配关系，比如数据源的某某格式应该对应ListView支持的某某格式。并从中将数据的来源和数据的显示进行了解耦，降低了程序的耦合性，让程序更容易扩展。</p> <p>&nbsp;</p> <h2>ListView的显示与缓存机制</h2> <p>&nbsp;</p> <p><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads/20230211/61459a439131eff6dcbfd5998f2648a7.jpg"></p> <p>&nbsp;</p> <p>&nbsp;</p> <p>如果存在一百条数据，ListView不会一次性全部加载，它只会加载屏幕能够展示的数据，如图中的7条数据，当手指向上滑动的时候，Item1就会移除屏幕，它就会被回收到一个Recycler的View缓冲池中，而Item8就从会缓存池中取出来一个布局文件，并通过<strong>getView()</strong>重新设置好Item8要显示的数据，再插入画面中空位中</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <h2>BaseAdapter通用适配器</h2> <p>&nbsp;</p> <p><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads/20230211/ae3ce3a0f581ee07d2c2e319bd3767d4.jpg"></p> <p><strong>getCount():</strong>就是这个ListView总共要显示多少条数据</p> <p>&nbsp;</p> <p><strong>使用步骤：</strong></p> <p><strong>第一步，</strong>我们要建立好android的界面布局，首先是主要的ListView的布局界面</p> <p>&nbsp;</p> <p>在activity_main.xml写一个ListView，代码如下：</p> <p><strong>activity_main.xml</strong></p> <pre class="has"><code class="language-html">&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"     xmlns:tools="http://schemas.android.com/tools"     android:layout_width="match_parent"     android:layout_height="match_parent"     tools:context="${relativePackage}.${activityClass}" &gt;      &lt;ListView         android:id="@+id/lv_main"         android:layout_width="wrap_content"         android:layout_height="wrap_content"         android:text="@string/hello_world" /&gt;  &lt;/RelativeLayout&gt; </code></pre> <p><strong>第二步</strong>，再新建一个item布局，作为ListView的子布局</p> <p><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads/20230211/96332ecb1d16c6e2ba5f79a71f558eaf.jpg"></p> <p>&nbsp;</p> <p>布局文件如下：</p> <p><strong>item.xml</strong></p> <p>&nbsp;</p> <pre class="has"><code class="language-html">&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"     android:layout_width="match_parent"     android:layout_height="match_parent"     android:orientation="vertical" &gt;      &lt;ImageView         android:id="@+id/iv_image"         android:layout_width="60dp"         android:layout_height="60dp"         android:src="@drawable/ic_launcher" /&gt;      &lt;TextView         android:id="@+id/tv_title"         android:layout_width="match_parent"         android:layout_height="30dp"         android:layout_alignParentTop="true"         android:layout_toRightOf="@+id/iv_image"         android:gravity="center"         android:layout="@+id/iv_image"         android:text="title" /&gt;       &lt;TextView          android:id="@+id/tv_content"          android:layout_width="match_parent"          android:layout_height="30dp"          android:layout_alignBottom="@+id/iv_image"          android:layout_alignLeft="@+id/tv_title"          android:layout_alignParentRight="true"          android:gravity="center_vertical"          android:layout="@+id/iv_image"          android:text="content" /&gt;  &lt;/RelativeLayout&gt;</code></pre> <p>&nbsp;</p> <p>这个布局是用来给ListView每一项Item显示内容的布局,效果如下</p> <p>&nbsp;</p> <p><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads/20230211/d6a65a8e251dac18375d3b76a6daecb3.jpg"></p> <p>&nbsp;</p> <h2>&nbsp;</h2> <h2>BaseAdapter之创建数据源</h2> <p>之前我们已经将ListView的item项布局已经建好了，但是我们还需要建立一个数据源，通过数据源来给item赋值。</p> <p><strong>第三步</strong>，创建数据源，这里新建一个Java类，叫做itemBean,作用是来封装item布局的三个数据，图片，title,content</p> <p><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads/20230211/0844c8a297abc4cdfe87a83ae7c52f63.jpg"></p> <p><strong>ItemBean.java</strong></p> <p>&nbsp;</p> <pre class="has"><code class="language-html">package bnuz.lwj.listviewteacheing;  public class ItemBean { 	public int ItemImageResid; 	public String ItemTitle; 	public String ItemContent; 	 	//构造方法 	public ItemBean(int itemImageResid, String itemTitle, String itemContent) { 		super(); 		ItemImageResid = itemImageResid; 		ItemTitle = itemTitle; 		ItemContent = itemContent; 	} 	 	  }</code></pre> <p>将数据封装起来，每一个ItemBean对象就对应一个Item布局的内容</p> <p>&nbsp;</p> <p><strong>第四步</strong>，我们要给数据源赋值，然后我们切换在MainActivity的onCreate（）函数中写一个for循环，用于 赋值、调试</p> <p>&nbsp;</p> <pre class="has"><code class="language-html">List&lt;ItemBean&gt; itemBeanList=new ArrayList&lt;ItemBean&gt;(); for(int i=0;i&lt;20;i++){ 	itemBeanList.add(new ItemBean(R.drawable.ic_launcher,"我的标题"+i,"我是内容"+i)); }</code></pre> <p>&nbsp;</p> <p>&nbsp;</p> <h2>BaseAdapter之数据适配器初解</h2> <p>经过上面的操作，我们已经将数据源建立起来了，然后我们需要重写一个数据适配器</p> <p><strong>第五步</strong>、重写数据适配器，新建一个JAVA类,MyAdapter.java，继承于BaseAdapter，重写四个函数，我们可以看到这四个函数就是我们之间在上面介绍BaseAdapter通用适配器的时候图片所展示出来的四个函数（如果没看懂，就上去看上边的图片，BaseAdapter的基本结构）</p> <p>&nbsp;</p> <p><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads/20230211/5f66de7ab177414d68ecc32e5a5f9cfa.jpg"></p> <p>为了从数据源中要获取传进来的数据，通常在适配器中对数据进行初始化</p> <p><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads/20230211/e73a16df7e64cc416d726287f5f301eb.jpg"></p> <h2>这里贴出前三个函数的重写方法，每一个函数的作用都写在了注释了，可以参考上边BaseAdapter的基本结构的图一一对应，好好琢磨，会想通的</h2> <pre class="has"><code class="language-html">//私人成员属性，用于保存传进来的数据 	private List &lt;ItemBean&gt; mList; 	//构造方法，用于初始化传进来的参数 	//这里需要传进来一个context对象来初始化 mInflater 	public MyAdapter(Context context,List&lt;ItemBean&gt; list) { 		mList=list; 		mInflater=LayoutInflater.from(context); 	} 	@Override 	public int getCount() { 		// 返回ListView需要显示的数据 		return mList.size(); 	}  	@Override 	public Object getItem(int position) { 		//所有的数据（集中）项数据都存放在mList中 		//取出对应索引的数据项的数据并返回 		return mList.get(position); 	}  	@Override 	public long getItemId(int position) { 		// 返回某个数据项对应的索引 		return position; 	}</code></pre> <p>&nbsp;</p> <h2>getView（）的三种使用方法</h2> <p>第四个函数<strong>getView（）</strong>即是最重要也是最复杂的一个函数，所以一定要弄懂这个函数。</p> <p>同时这个函数，这里总结三个方法。</p> <p>&nbsp;</p> <p>第一个方法仔细的总结一下，第二第三个方法就贴代码，不一一总结了。</p> <p>&nbsp;</p> <p><strong>第一个方法：</strong></p> <p>&nbsp;</p> <p>首先我们要在<strong>MyAdapter</strong>函数里，创建一个<strong>LayoutInflater</strong>对象，它的作用是将XML文件转化为一个<strong>View</strong>布局，然后 通过<strong>LayoutInflater.from(context)</strong>来初始化</p> <p>&nbsp;</p> <p><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads/20230211/20921cef3c60b282123469b268691798.jpg"></p> <p>&nbsp;</p> <p>&nbsp;</p> <p> 然后在<strong>getView</strong>函数里，新定义一个<strong>View</strong>的对象来获取<strong>mInflater</strong>装载的item布局的对象。</p> <p><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads/20230211/9c5fc0911990217df8d55a476619b8df.jpg"></p> <p>&nbsp;</p> <p>然后我们需要将getItem（）函数从数据源中取得并返回来的数据赋值我们的item.xml里的三个控件或则新定义一个ItemBean,再通过List集合的get索引（position）方法来获取在mList的数据项，在这里，我们使用第二种方法。</p> <p>第一种方法的完整代码</p> <p>&nbsp;</p> <pre class="has"><code class="language-html">@Override 	public View getView(int position, View convertView, ViewGroup parent) { 		//这是最重要也是最复杂的方法 		//作用是返回每一项的内容 	//方法一、效率低下 		//将item.xml转化为View布局 		View view =mInflater.inflate(R.layout.item,null); 		ImageView imageView=(ImageView) view.findViewById(R.id.iv_image); 		TextView title=(TextView) view.findViewById(R.id.tv_title); 		TextView content=(TextView) view.findViewById(R.id.tv_content); 		//赋值 		ItemBean bean =mList.get(position);				 		imageView.setImageResource(bean.ItemImageResid); 		title.setText(bean.ItemTitle); 		content.setText(bean.ItemContent); 		 		return view; 		 	 	}</code></pre> <p>&nbsp;</p> <p>&nbsp;</p> <p>&nbsp;</p> <p>但是方法一没有使用到ListView的缓存机制，这是对资源的极大浪费，效率低下，所以不推荐使用</p> <p>&nbsp;</p> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <p><strong>第二个方法：</strong></p> <p>&nbsp;</p> <p>第二种方法的完整代码</p> <p>&nbsp;</p> <pre class="has"><code class="language-html">@Override 	public View getView(int position, View convertView, ViewGroup parent) { 		//这是最重要也是最复杂的方法 		//作用是返回每一项的内容 	 		//方法二、正常,利用了ListView的缓存机制，算入门，findViewById会浪费大量时间 		//如果为空：View未被实例化，缓存池中也无缓存,所以我们要主动为它赋一个View 		if(convertView==null){ 			convertView=mInflater.inflate(R.layout.item,null); 		} 		ImageView imageView=(ImageView)convertView.findViewById(R.id.iv_image); 		TextView title=(TextView) convertView.findViewById(R.id.tv_title); 		TextView content=(TextView) convertView.findViewById(R.id.tv_content); 		//赋值 		ItemBean bean =mList.get(position);				 		imageView.setImageResource(bean.ItemImageResid); 		title.setText(bean.ItemTitle); 		content.setText(bean.ItemContent); 		return convertView; 	 	 	}</code></pre> <p>&nbsp;</p> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <p>第二种方法虽然使用了ListView的缓存机制，算入门方式，但是其中每次都会重复调用多次findViewById，也会浪费资源，所以谷歌的大佬提供了第三种方式</p> <p>&nbsp;</p> <p><strong>第三个方法：</strong></p> <p>首先在MyAdapter类里定义一个内部类ViewHolder类，作用就是为了避免重复的findViewById操作</p> <p>&nbsp;</p> <pre class="has"><code class="language-html">//创建一个内部类,作业就是为了避免重复的findViewById操作 	class ViewHolder{ 		//对应item.xml的三个控件 		public ImageView imageView; 		public TextView title; 		public TextView content; 	} </code></pre> <p>第三种方法的完整代码</p> <p>&nbsp;</p> <pre class="has"><code class="language-html">@Override 	public View getView(int position, View convertView, ViewGroup parent) { 		//这是最重要也是最复杂的方法 		//作用是返回每一项的内容 	 		//方法三、建议使用 		ViewHolder viewHolder; 		if(convertView==null){ 			viewHolder=new ViewHolder(); 			convertView=mInflater.inflate(R.layout.item,null); 			//将控件保存到viewHolder中 			viewHolder.imageView=(ImageView)convertView.findViewById(R.id.iv_image); 			viewHolder.title=(TextView) convertView.findViewById(R.id.tv_title); 			viewHolder.content=(TextView) convertView.findViewById(R.id.tv_content); 			//通过setTag将ViewHoler与convertView绑定 			convertView.setTag(viewHolder);			 		}else{ 			viewHolder=(ViewHolder) convertView.getTag();					 		} 		ItemBean bean =mList.get(position);				 		viewHolder.imageView.setImageResource(bean.ItemImageResid); 		viewHolder.title.setText(bean.ItemTitle); 		viewHolder.content.setText(bean.ItemContent); 		 		return convertView; 	 	 	}</code></pre> <p>&nbsp;</p> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <pre>&nbsp;</pre> <p>作用就是通过ViewHodler，当converView为空的时候，我们为其赋值，并且通过converView.setTag(viewHolder)的方法将holder与converView进行绑定，之后的遍历中，每次只要通过converView的getTag()方法就能获取到converView的三个控件，避免了每次都通过findById这个方法去实例化三个控件。</p> <p>&nbsp;</p> <p>&nbsp;</p> <p><strong>MyAdapter.java</strong></p> <p>&nbsp;</p> <pre class="has"><code class="language-html">package bnuz.lwj.listviewteacheing;  import java.util.List; import bnuz.lwj.listviewteacheing.ItemBean; import android.content.Context; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.BaseAdapter; import android.widget.ImageView; import android.widget.TextView;  public class MyAdapter extends BaseAdapter{ 	//创建一个LayoutInflater 	private LayoutInflater mInflater; 	//私人成员属性，用于保存传进来的数据 	private List &lt;ItemBean&gt; mList; 	//构造方法，用于初始化传进来的参数 	//这里需要传进来一个context对象来初始化 mInflater 	public MyAdapter(Context context,List&lt;ItemBean&gt; list) { 		mList=list; 		mInflater=LayoutInflater.from(context); 	} 	@Override 	public int getCount() { 		// 返回ListView需要显示的数据 		return mList.size(); 	}  	@Override 	public Object getItem(int position) { 		//所有的数据（集中）项数据都存放在mList中 		//取出对应索引的数据项的数据并返回 		return mList.get(position); 	}  	@Override 	public long getItemId(int position) { 		// 返回某个数据项对应的索引 		return position; 	}  	@Override 	public View getView(int position, View convertView, ViewGroup parent) { 		//这是最重要也是最复杂的方法 		//作用是返回每一项的内容 	//方法一、效率低下 		//将item.xml转化为View布局 		/*View view =mInflater.inflate(R.layout.item,null); 		ImageView imageView=(ImageView) view.findViewById(R.id.iv_image); 		TextView title=(TextView) view.findViewById(R.id.tv_title); 		TextView content=(TextView) view.findViewById(R.id.tv_content); 		//赋值 		ItemBean bean =mList.get(position);				 		imageView.setImageResource(bean.ItemImageResid); 		title.setText(bean.ItemTitle); 		content.setText(bean.ItemContent); 		 		return view;*/ 		 	//方法二、正常,利用了ListView的缓存机制，算入门，findViewById会浪费大量时间 		//如果为空：View未被实例化，缓存池中也无缓存,所以我们要主动为它赋一个View 		/*if(convertView==null){ 			convertView=mInflater.inflate(R.layout.item,null); 		} 		ImageView imageView=(ImageView)convertView.findViewById(R.id.iv_image); 		TextView title=(TextView) convertView.findViewById(R.id.tv_title); 		TextView content=(TextView) convertView.findViewById(R.id.tv_content); 		//赋值 		ItemBean bean =mList.get(position);				 		imageView.setImageResource(bean.ItemImageResid); 		title.setText(bean.ItemTitle); 		content.setText(bean.ItemContent); 		return convertView;*/ 	//方法三、建议使用 		ViewHolder viewHolder; 		if(convertView==null){ 			viewHolder=new ViewHolder(); 			convertView=mInflater.inflate(R.layout.item,null); 			//将控件保存到viewHolder中 			viewHolder.imageView=(ImageView)convertView.findViewById(R.id.iv_image); 			viewHolder.title=(TextView) convertView.findViewById(R.id.tv_title); 			viewHolder.content=(TextView) convertView.findViewById(R.id.tv_content); 			//通过setTag将ViewHoler与convertView绑定 			convertView.setTag(viewHolder);			 		}else{ 			viewHolder=(ViewHolder) convertView.getTag();					 		} 		ItemBean bean =mList.get(position);				 		viewHolder.imageView.setImageResource(bean.ItemImageResid); 		viewHolder.title.setText(bean.ItemTitle); 		viewHolder.content.setText(bean.ItemContent); 		 		return convertView; 	} 	 	//创建一个内部类,作业就是为了避免重复的findViewById操作 	class ViewHolder{ 		//对应item.xml的三个控件 		public ImageView imageView; 		public TextView title; 		public TextView content; 	}  }</code></pre> <p> 这里将方法一、二都注释掉，第三种方法不仅仅利用了ListView的缓存机制，更通过ViewHolder类来实现显示数据的视图的缓存，避免了多次通过调用findViewById寻找控件</p> <p>所以强烈建议使用第三种方法</p> <p>&nbsp;</p> <h2>ListView调用BaseAdapter适配器</h2> <p>&nbsp;</p> <p><strong>第六步，</strong>在MainActivity中，我们通过setAdapter来讲view对象的数据传递到ListView对象中</p> <p>&nbsp;</p> <p><strong>MainActivity.java</strong></p> <pre class="has"><code class="language-html">package bnuz.lwj.listviewteacheing;  import java.util.ArrayList; import java.util.List;  import android.app.Activity; import android.os.Bundle; import android.view.Menu; import android.view.MenuItem; import android.widget.ListView;  public class MainActivity extends Activity { 	ListView listView; 	@Override 	protected void onCreate(Bundle savedInstanceState) { 		super.onCreate(savedInstanceState); 		setContentView(R.layout.activity_main); 		listView=(ListView) findViewById(R.id.lv_main); 		List&lt;ItemBean&gt; itemBeanList=new ArrayList&lt;ItemBean&gt;(); 		for(int i=0;i&lt;20;i++){ 			itemBeanList.add(new ItemBean(R.drawable.ic_launcher,"我的标题"+i,"我是内容"+i)); 		} 		//通过这个函数，我们可以将一个MyAdpter对象传递给我们的ListView 		//从而达到将数据源中多种多样的数据格式转化为ListView可以展示的格式 		//因为在MyAdpter中，已经将数据进行处理，赋值给View并返回过来 		listView.setAdapter(new MyAdapter(this,itemBeanList)); 	} } </code></pre> <p> 最后结果展示</p> <p>&nbsp;</p> <p><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads/20230211/55afa16b7fdd8182c8168fc128e445fd.jpg"></p> <p>总结就到此结束~~~</p> <p>&nbsp;</p> <p>&nbsp;</p> <p><span style="color:#ff0000;">第一次码博客，就请各位大佬高抬贵手，本总结是看了慕课网的大佬后写的，截图也是出自视频</span></p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://download.csdn.net/detail/snailmann/9853709"  rel="nofollow"><span style="color:#3366ff;">完整源码下载点击这里</span></a></p> <p>&nbsp;</p> <p>欢迎关注我的博客，一起学习讨论</p> <p>要转载，请附上原文链接，作者：SnailMann</p> <p>&nbsp;</p> <p><span style="color:#ff0000;">可以关注我的私人github:&nbsp;https://github.com/SnailMann，欢迎watch ,star, fork</span></p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/SnailMann"  rel="nofollow"><span style="color:#3366ff;">关注我的私人GitHub</span></a></p> <p>虽然现在暂时没有什么东西,但是总会有的<img decoding="async" alt="大笑" class="has" src="0"/></p> <p>&nbsp;</p> <p>&nbsp;</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-69466.htm">猫三联一次疫苗多少钱一针（猫三联一次疫苗多少钱一针啊）</a></p>
                                        <p>下一个：<a href="/news/article-70118.htm">SpringBoot自定义控制层参数解析_在线工具</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-56240.htm" title="我所在的城市有一个动物园用英语怎么说 我所在的城市有一个动物园用英语怎么说写">我所在的城市有一个动物园用英语怎么说 我所在的城市有一个动物园用英语怎么说写</a></li>
                        <li class="py-2"><a href="/news/article-55134.htm" title="动物医院大众点评文案简短一点（动物医院好评模板）">动物医院大众点评文案简短一点（动物医院好评模板）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-7-free-shadowrocket-node.htm" title="2月7日|SSR/Shadowrocket/V2ray/Clash每天更新20.9M/S免费节点订阅链接地址">2月7日|SSR/Shadowrocket/V2ray/Clash每天更新20.9M/S免费节点订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-64408.htm" title="/usr/local/kafka/kafka_2.13-2.7.1/bin/kafka-run-class.sh: 第 318 行:exec: java: 未找到 问题已解决">/usr/local/kafka/kafka_2.13-2.7.1/bin/kafka-run-class.sh: 第 318 行:exec: java: 未找到 问题已解决</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-19-clash-node.htm" title="2月19日|Shadowrocket/V2ray/Clash/SSR每天更新20.4M/S免费节点订阅链接地址">2月19日|Shadowrocket/V2ray/Clash/SSR每天更新20.4M/S免费节点订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-43844.htm" title="动物疫苗接种注意事项（动物疫苗接种注意问题）">动物疫苗接种注意事项（动物疫苗接种注意问题）</a></li>
                        <li class="py-2"><a href="/news/article-62595.htm" title="合肥宠物寄养一般怎么收费（合肥宠物收养中心）">合肥宠物寄养一般怎么收费（合肥宠物收养中心）</a></li>
                        <li class="py-2"><a href="/news/article-44848.htm" title="北京观赏宠物医院电话号码（宠物公园北京）">北京观赏宠物医院电话号码（宠物公园北京）</a></li>
                        <li class="py-2"><a href="/news/article-40379.htm" title="C++虚函数与纯虚函数">C++虚函数与纯虚函数</a></li>
                        <li class="py-2"><a href="/news/article-40864.htm" title="中农大动物医院有限公司是国企吗还是私企（中农大动物医院怎么样）">中农大动物医院有限公司是国企吗还是私企（中农大动物医院怎么样）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">33</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p class="copyright_text">
                            ClashNodesFree免费订阅站 版权所有
                            <br />
                            Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/website/js/frontend/clashnodesfree/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/clashnodesfree/popper.min.js"></script>
    <script src="/assets/website/js/frontend/clashnodesfree/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashnodesfree/jquery-3.0.0.min.js"></script>
    <script src="/assets/website/js/frontend/clashnodesfree/plugin.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>